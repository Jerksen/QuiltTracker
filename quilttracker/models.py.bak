from django.db import models
from django.core.validators import MinValueValidator, MaxValueValidator
from django.utils import timezone

# from phonenumber_field.modelfields import PhoneNumberField
import datetime

# Create your models here.
class Customer(models.Model):
    # statuses
    ST_ACTIVE = "active"
    ST_ARCHIVED = "archived"
    STATUS_CHOICES = (
        (ST_ACTIVE, "Active"),
        (ST_ARCHIVED, "Archived"),
    )
    status = models.CharField(max_length=10, choices=STATUS_CHOICES, default=ST_ACTIVE)

    # base info
    firstname = models.CharField(max_length=64, verbose_name="First Name")
    lastname = models.CharField(max_length=64, verbose_name="Last Name")

    # contact info
    email = models.EmailField(unique=True)
    instagram = models.CharField(max_length=64, blank=True)
    # phone = models.PhoneNumberField(blank=True)

    def __str__(self):
        return "{} {} ({})".format(self.firstname, self.lastname, self.email)

    # other info
    notes = models.CharField(max_length=500, blank=True)


class Batting(models.Model):
    ST_ACTIVE = "active"
    ST_ARCHIVED = "archived"
    STATUS_CHOICES = (
        (ST_ACTIVE, "Active"),
        (ST_ARCHIVED, "Archived"),
    )
    status = models.CharField(max_length=10, choices=STATUS_CHOICES, default=ST_ACTIVE)
    name = models.CharField(max_length=64, unique=True)

    def get_price_per_inch(self, date):
        return BattingPrice.get_price_for_date(self.name, date)

    def __str__(self):
        return self.name


class Pantograph(models.Model):
    ST_ACTIVE = "active"
    ST_ARCHIVED = "archived"
    STATUS_CHOICES = (
        (ST_ACTIVE, "Active"),
        (ST_ARCHIVED, "Archived"),
    )
    status = models.CharField(max_length=10, choices=STATUS_CHOICES, default=ST_ACTIVE)
    name = models.CharField(max_length=64, unique=True)


class Quilt(models.Model):
    # base info
    nickname = models.CharField(max_length=64)
    width = models.IntegerField(
        validators=[MinValueValidator(1), MaxValueValidator(120)]
    )
    length = models.IntegerField(
        validators=[MinValueValidator(1), MaxValueValidator(144)]
    )
    customer = models.ForeignKey(Customer, on_delete=models.PROTECT)
    batting = models.ForeignKey(
        Batting, on_delete=models.PROTECT, blank=True, null=True
    )

    # flags
    sms_updates = models.BooleanField(default=False)
    make_binding = models.BooleanField(default=False)
    attach_binding = models.BooleanField(default=False)

    # extra info
    feeling = models.CharField(max_length=500, blank=True)
    pattern = models.CharField(max_length=500, blank=True)

    # pattern info
    pantograph = models.ForeignKey(
        Pantograph, on_delete=models.PROTECT, blank=True, null=True
    )

    # statuses
    ST_FORM_SUBMITTED = "form submitted"
    ST_RECEIVED = "received"
    ST_RETURNED = "returned"
    ST_CLOSED = "closed"

    STATUS_CHOICES = (
        (ST_FORM_SUBMITTED, "Form Submitted"),
        (ST_RECEIVED, "Received"),
        (ST_RETURNED, "Returned"),
        (ST_CLOSED, "Closed"),
    )

    status = models.CharField(
        max_length=20, choices=STATUS_CHOICES, default=ST_FORM_SUBMITTED
    )

    # date info
    receivedOn = models.DateTimeField(blank=True, null=True)

    def __str__(self):
        return "{} ({}x{})".format(self.nickname, self.width, self.length)
    # createdOn = models.DateTimeField(blank=True, null=True)
    # modifiedOn = models.DateTimeField(blank=True, null=True)

    #    def save(self, *args, **kwargs):
    #        #Update Time stamps on save
    #        if not self.id and self.createdOn == "":
    #            self.createdOn = timezone.now()

    #        self.modifiedOn = timezone.now()
    #        return super(Quilt, self).save(*args, **kwargs)

    def get_area(self):
        return self.width * self.length

    def get_linear_length(self):
        return min(self.width, self.length)

    def instagramPostsAllowed(self):
        return self.instagramDate is not Null


class QuiltImages(models.Model):
    dateTaken = models.DateTimeField(blank=True)
    caption = models.CharField(blank=True, max_length=64)
    quilt = models.ForeignKey(Quilt, on_delete=models.PROTECT)


#    image = models.ImageField()


class LongArmRates(models.Model):
    price = models.DecimalField(
        verbose_name="price per square inch",
        validators=[MinValueValidator(0.001), MaxValueValidator(0.1)],
        unique_for_date=True,
        decimal_places=3,
        max_digits=4,
    )
    applicable_date = models.DateField()

    createdOn = models.DateTimeField(editable=False)
    modifiedOn = models.DateTimeField()

    def save(self, *args, **kwargs):
        """Update Time stamps on save"""
        if not self.id:
            self.createdOn = timezone.now()

        self.modifiedOn = timezone.now()
        return super(LongArmRates, self).save(*args, **kwargs)

    def get_price_for_date(self, date):
        """ get the effective price for a given date """
        return (
            LongArmRates.objects.filter(applicable_date__lte=date)
            .order_by("-applicable_date")[0]
            .price
        )

    def __str__(self):
        return "{} as of {}".format(self.price, self.applicable_date)


class BattingPrice(models.Model):
    batting = models.ForeignKey(to=Batting, on_delete=models.CASCADE)
    price = models.DecimalField(
        verbose_name="price per linear inch",
        validators=[MinValueValidator(0), MaxValueValidator(2)],
        decimal_places=2,
        max_digits=3,
    )
    applicable_date = models.DateField()

    createdOn = models.DateTimeField(editable=False)
    modifiedOn = models.DateTimeField()

    def save(self, *args, **kwargs):
        """Update Time stamps on save"""
        if not self.id:
            self.createdOn = timezone.now()

        self.modifiedOn = timezone.now()
        return super(BattingPrice, self).save(*args, **kwargs)

    def get_price_for_date(self, name, date):
        """ get the effective price for a given date"""
        return (
            BattingPrice.objects.filter(batting__name=name)
            .filter(applicable_date__lte=date)
            .order_by("-applicable_date")[0]
            .price
        )

    def __str__(self):
        return "{} - ${} as of {}".format(
            self.batting.name, self.price, self.applicable_date.__format__("%Y-%m-%d")
        )
